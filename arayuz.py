# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import qdarktheme
from PyQt5.QtCore import Qt
from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import Arima_c, NeuralNet_c, LSTM_c
#import Arima,NeuralNet,LSTM,DataVisual

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    dataframe = None
    selected_sube = None
    model_m = None

    def sube_kontrol(self):
        if self.selected_sube is None:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.setWindowIcon(QtGui.QIcon('zb_amblem.jpg'))
            error_dialog.setObjectName("Error")
            error_dialog.setWindowTitle("Hata!")
            error_dialog.showMessage('Sube Secilmedi. Once Sube Seciniz.')
            error_dialog.exec_()

    def getSube(self):
        df = pd.read_csv('modified.csv', sep=';', encoding='ISO:8859-1')
        df['Tarih'] = pd.to_datetime(df['Tarih'], infer_datetime_format=True)

        df.set_index('Tarih', inplace=True)
        self.dataframe = df

        subeler = df.columns.values.tolist()
        df_sube = pd.read_csv('subed_subeadi.csv', sep=';', encoding='windows-1254')
        list = []
        for sube in subeler:
            sube_id = sube.split("_")[1]
            sube_id = int(sube_id)
            temp = df_sube[(df_sube['REF_SUBE_ID'] == sube_id)].copy()
            isim = temp['REF_SUBE_ADI'].values
            isim = np.array_str(isim)
            isim = isim.split("'")[1]
            list.append(isim)

        list.sort()

        return list

    def veri_seti_click(self):
        plt.style.use('dark_background')
        self.sube_kontrol()
        plt.plot(self.dataframe[self.selected_sube])
        plt.show()

    def veri_seti_oz_click(self):
            plt.style.use('dark_background')
            self.sube_kontrol()
            decomposed = seasonal_decompose(self.dataframe[self.selected_sube],
                                            model='additive')
    
            # Extract and plot trend, seasonal and residuals.
            trend = decomposed.trend
            seasonal = decomposed.seasonal  # Cyclic behavior may not be seasonal!
            residual = decomposed.resid
    
            plt.figure(figsize=(12, 8))
            plt.subplot(411)
            plt.plot(self.dataframe[self.selected_sube], label='Original', color='yellow')
            plt.legend(loc='upper left')
            plt.subplot(412)
            plt.plot(trend, label='Trend', color='yellow')
            plt.legend(loc='upper left')
            plt.subplot(413)
            plt.plot(seasonal, label='Seasonal', color='yellow')
            plt.legend(loc='upper left')
            plt.subplot(414)
            plt.plot(residual, label='Residual', color='yellow')
            plt.legend(loc='upper left')
            plt.show()

    def test_pred_click(self):
        if self.model_m is None:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.setWindowIcon(QtGui.QIcon('zb_amblem.jpg'))
            error_dialog.setObjectName("Error")
            error_dialog.setWindowTitle("Hata!")
            error_dialog.showMessage('Model Calstirilmadi. Once Modeli Calistiriniz.')
            error_dialog.exec_()
        else:
            self.model_m.test_pred()

    def model_sonuc_click(self):
        if self.model_m is None:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.setWindowIcon(QtGui.QIcon('zb_amblem.jpg'))
            error_dialog.setObjectName("Error")
            error_dialog.setWindowTitle("Hata!")
            error_dialog.showMessage('Model Calstirilmadi. Once Modeli Calistiriniz.')
            error_dialog.exec_()

        else:
            self.model_m.model_sonuc()

    def opt_click(self):
        a1 = Arima_c.Arima(self.selected_sube)
        sonuc_string1 = a1.auto_ar()
        mape1 = sonuc_string1[4].split(" ")[2].split("\n")[0]
        mape1 = float(mape1)

        a2 = NeuralNet_c.NNet(self.selected_sube)
        sonuc_string2 = a2.neural_net()
        mape2 = sonuc_string2[4].split(" ")[2].split("\n")[0]
        mape2 = float(mape2)

        a3 = LSTM_c.Lstm(self.selected_sube)
        sonuc_string3 = a3.lstm_model()
        mape3 = sonuc_string3[4].split(" ")[2].split("\n")[0]
        mape3 = float(mape3)

        if mape1<mape2:
            if mape1<mape3:
                a = a1
                sonuc_string = sonuc_string1
            else:
                a = a3
                sonuc_string = sonuc_string3
        else:
            if mape2 < mape3:
                a = a2
                sonuc_string = sonuc_string2
            else:
                a = a3
                sonuc_string = sonuc_string3
        s = ""
        s = s.join(sonuc_string)
        self.model_sonuc.setText(s)
        self.model_m = a
        temp = a.forecast
        temp = [int(temp) for temp in temp]
        x = [str(temp) for temp in temp]

        yil = 2022
        ay = 4
        for i, temp in enumerate(x):
            date = "{}.{} --> ".format(ay, yil)
            temp = date + temp
            ay = ay + 1
            x[i] = temp

        self.for_sonuc.setText('\n'.join(x))




    def sube_sec(self,lst_itm):
        """sube = lst_itm.text()
        sube_id = sube.split("_")[1]
        sube_id = int(sube_id)"""
        sube =lst_itm.text()
        df_sube = pd.read_csv('subed_subeadi.csv', sep=';', encoding='windows-1254')
        temp = df_sube[(df_sube['REF_SUBE_ADI'] == sube)].copy()
        id = temp['REF_SUBE_ID'].values.tolist()
        sube_idt = 'Sube_{}'.format(id[0])
        self.Sube_isim.setText(lst_itm.text(),)
        self.selected_sube = sube_idt
        
        
        
    def cal_click(self):

        self.sube_kontrol()

        if self.comboBox.currentText() == 'Arima':
            a = Arima_c.Arima(self.selected_sube)
            sonuc_string = a.auto_ar()
            s = ""
            s = s.join(sonuc_string)
            self.model_sonuc.setText(s)
            self.model_m = a
            temp = a.forecast.values.tolist()
            temp = [int(temp) for temp in temp]
            x = [str(temp) for temp in temp]

            yil = 2022
            ay = 4
            for i, temp in enumerate(x):
                date = "{}.{} --> ".format(ay,yil)
                temp = date+temp
                ay = ay + 1
                x[i] = temp
                
            self.for_sonuc.setText('\n'.join(x))

        elif self.comboBox.currentText() == 'NeuralNet':
            a = NeuralNet_c.NNet(self.selected_sube)
            sonuc_string = a.neural_net()
            s = ""
            s = s.join(sonuc_string)
            self.model_sonuc.setText(s)
            self.model_m = a
            temp = a.forecast
            temp = [int(temp) for temp in temp]
            x = [str(temp) for temp in temp]

            yil = 2022
            ay = 4
            for i, temp in enumerate(x):
                date = "{}.{} --> ".format(ay, yil)
                temp = date + temp
                ay = ay + 1
                x[i] = temp

            self.for_sonuc.setText('\n'.join(x))
        elif self.comboBox.currentText() == 'LSTM':
            a = LSTM_c.Lstm(self.selected_sube)
            sonuc_string = a.lstm_model()
            s = ""
            s = s.join(sonuc_string)
            self.model_sonuc.setText(s)
            self.model_m = a
            temp = a.forecast
            temp = [int(temp) for temp in temp]
            x = [str(temp) for temp in temp]

            yil = 2022
            ay = 4
            for i, temp in enumerate(x):
                date = "{}.{} --> ".format(ay, yil)
                temp = date + temp
                ay = ay + 1
                x[i] = temp

            self.for_sonuc.setText('\n'.join(x))


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(879, 695)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(300, 120, 141, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")


        self.subeler_text = QtWidgets.QLabel(self.centralwidget)
        self.subeler_text.setGeometry(QtCore.QRect(50, 10, 100, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.subeler_text.setFont(font)
        self.subeler_text.setObjectName("subeler_text")
        self.model_text = QtWidgets.QLabel(self.centralwidget)
        self.model_text.setGeometry(QtCore.QRect(190, 120, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.model_text.setFont(font)
        self.model_text.setObjectName("model_text")


        self.calistir = QtWidgets.QPushButton(self.centralwidget)
        self.calistir.setGeometry(QtCore.QRect(310, 180, 131, 31))
        self.calistir.setObjectName("calistir")
        self.calistir.clicked.connect(self.cal_click)


        self.model_sonuc = QtWidgets.QTextEdit(self.centralwidget)
        self.model_sonuc.setGeometry(QtCore.QRect(530, 120, 321, 171))
        self.model_sonuc.setObjectName("model_sonuc")


        self.model_sonuclari_text = QtWidgets.QLabel(self.centralwidget)
        self.model_sonuclari_text.setGeometry(QtCore.QRect(630, 90, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.model_sonuclari_text.setFont(font)
        self.model_sonuclari_text.setObjectName("model_sonuclari_text")

        self.optimize = QtWidgets.QPushButton(self.centralwidget)
        self.optimize.setGeometry(QtCore.QRect(310, 230, 131, 41))
        self.optimize.setObjectName("optimize")
        self.optimize.clicked.connect(self.opt_click)

        self.graf_text = QtWidgets.QLabel(self.centralwidget)
        self.graf_text.setGeometry(QtCore.QRect(350, 320, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.graf_text.setFont(font)
        self.graf_text.setObjectName("graf_text")

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(300, 360, 160, 241))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")

        self.button_list = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.button_list.setContentsMargins(0, 0, 0, 0)
        self.button_list.setObjectName("button_list")

        self.veri_seti = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.veri_seti.setObjectName("veri_seti")
        self.veri_seti.clicked.connect(self.veri_seti_click)

        self.button_list.addWidget(self.veri_seti)
        self.veriseti_oz = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.veriseti_oz.setObjectName("veriseti_oz")
        self.veriseti_oz.clicked.connect(self.veri_seti_oz_click)

        self.button_list.addWidget(self.veriseti_oz)
        self.model_sonuc_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.model_sonuc_2.setObjectName("model_sonuc_2")
        self.model_sonuc_2.clicked.connect(self.model_sonuc_click)
        self.button_list.addWidget(self.model_sonuc_2)

        self.test_pred = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.test_pred.setObjectName("test_pred")
        self.test_pred.clicked.connect(self.test_pred_click)
        self.button_list.addWidget(self.test_pred)

        self.Sube_isim = QtWidgets.QLabel(self.centralwidget)
        self.Sube_isim.setGeometry(QtCore.QRect(230, 0, 621, 71))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.Sube_isim.setFont(font)
        self.Sube_isim.setObjectName("Sube_isim")

        self.for_sonuc = QtWidgets.QTextEdit(self.centralwidget)
        self.for_sonuc.setGeometry(QtCore.QRect(533, 360, 311, 161))
        self.for_sonuc.setObjectName("for_sonuc")

        self.for_text = QtWidgets.QLabel(self.centralwidget)
        self.for_text.setGeometry(QtCore.QRect(620, 330, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.for_text.setFont(font)
        self.for_text.setObjectName("for_text")


        self.sube_list = QtWidgets.QListWidget(self.centralwidget)
        self.sube_list.setGeometry(QtCore.QRect(20, 51, 161, 571))
        self.sube_list.setObjectName("sube_list")
        self.sube_list.addItems(self.getSube())
        self.sube_list.itemDoubleClicked.connect(self.sube_sec)
        MainWindow.setCentralWidget(self.centralwidget)


        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 879, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Forecast Program"))
        MainWindow.setWindowIcon(QtGui.QIcon('zb_amblem.jpg'))
        self.comboBox.setItemText(0, _translate("MainWindow", "Arima"))
        self.comboBox.setItemText(1, _translate("MainWindow", "NeuralNet"))
        self.comboBox.setItemText(2, _translate("MainWindow", "LSTM"))
        self.subeler_text.setText(_translate("MainWindow", "Şubeler"))
        self.model_text.setText(_translate("MainWindow", "Model Seçimi:"))
        self.calistir.setText(_translate("MainWindow", "Çalıştır"))
        self.model_sonuclari_text.setText(_translate("MainWindow", "Model Sonuçları"))
        self.optimize.setText(_translate("MainWindow", "Optimize Model Bul"))
        self.graf_text.setText(_translate("MainWindow", "Grafikler"))
        self.veri_seti.setText(_translate("MainWindow", "Veri Seti"))
        self.veriseti_oz.setText(_translate("MainWindow", "Veri Seti Özellikleri"))
        self.model_sonuc_2.setText(_translate("MainWindow", "Model Tahmin Sonuç"))
        self.test_pred.setText(_translate("MainWindow", "Test-Predict"))
        self.Sube_isim.setText(_translate("MainWindow", "ŞUBE"))
        self.for_text.setText(_translate("MainWindow", "Forecast Sonuçları"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setStyleSheet(qdarktheme.load_stylesheet())
    app.setAttribute(Qt.ApplicationAttribute.AA_UseHighDpiPixmaps)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())